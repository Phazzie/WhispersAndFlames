// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview This file defines a Genkit flow for generating contextual questions based on
 * selected intimacy categories and spicy level.
 *
 * - generateContextualQuestions - A function that generates questions based on input parameters.
 * - GenerateContextualQuestionsInput - The input type for the generateContextualQuestions function.
 * - GenerateContextualQuestionsOutput - The return type for the generateContextualQuestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateContextualQuestionsInputSchema = z.object({
  categories: z
    .array(z.string())
    .describe('The intimacy categories selected by the users.'),
  spicyLevel: z.enum(['Mild', 'Medium', 'Hot', 'Extra-Hot']).describe('The spicy level chosen by the users.'),
  previousQuestionsAndAnswers: z
    .array(z.object({question: z.string(), answer: z.string()}))
    .optional()
    .describe('Previous questions and answers to maintain context and avoid repetition.'),
});
export type GenerateContextualQuestionsInput = z.infer<typeof GenerateContextualQuestionsInputSchema>;

const GenerateContextualQuestionsOutputSchema = z.object({
  question: z.string().describe('The generated question.'),
});
export type GenerateContextualQuestionsOutput = z.infer<typeof GenerateContextualQuestionsOutputSchema>;

const generateQuestionTool = ai.defineTool({
  name: 'generateQuestion',
  description: 'Generates a unique and contextually relevant question based on the provided categories, spicy level, and previous questions/answers.',
  inputSchema: GenerateContextualQuestionsInputSchema,
  outputSchema: GenerateContextualQuestionsOutputSchema,
},
async (input) => {
  // Invoke the question generation flow here
  return generateContextualQuestionsFlow(input);
});

export async function generateContextualQuestions(
  input: GenerateContextualQuestionsInput
): Promise<GenerateContextualQuestionsOutput> {
  return generateQuestionTool(input);
}

const prompt = ai.definePrompt({
  name: 'generateContextualQuestionsPrompt',
  input: {schema: GenerateContextualQuestionsInputSchema},
  output: {schema: GenerateContextualQuestionsOutputSchema},
  prompt: `You are an AI designed to generate unique and engaging questions for couples to explore their intimacy.

  Consider the following intimacy categories: {{categories}}
  The spicy level is: {{spicyLevel}}

  {{#if previousQuestionsAndAnswers}}
  Take into account the following previous questions and answers to avoid repetition and maintain context:
  {{#each previousQuestionsAndAnswers}}
  Question: {{this.question}}
  Answer: {{this.answer}}
  {{/each}}
  {{/if}}

  Generate a question that is relevant to the selected categories and spicy level, and that has not been asked before.
  The question should encourage open and honest communication between partners.
  Be creative and engaging.
  Keep the questions short.`,
});

const generateContextualQuestionsFlow = ai.defineFlow(
  {
    name: 'generateContextualQuestionsFlow',
    inputSchema: GenerateContextualQuestionsInputSchema,
    outputSchema: GenerateContextualQuestionsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
